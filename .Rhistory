values_to = c("value"))
View(temp)
temp <- filter(temp, country %in% c("US", "China", "Mexico"))
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
temp$dates <- dates
ggplot(data = temp) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
temp <- cleaned_data %>%
pivot_longer(colnames(cleaned_data)[!colnames(cleaned_data) %in% "dates"],
names_to = c("country"),
values_to = c("value"))
temp <- filter(temp, country %in% c("US", "China", "Mexico"))
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
temp$dates <- dates
ggplot(data = temp) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
temp <- cleaned_data %>%
pivot_longer(colnames(cleaned_data)[!colnames(cleaned_data) %in% "dates"],
names_to = c("country"),
values_to = c("value"))
temp <- filter(temp, country %in% c("US", "China", "Mexico"))
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
temp$dates <- dates
ggplot(data = temp) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
temp <- cleaned_data_changes %>%
pivot_longer(colnames(cleaned_data_changes)[!colnames(cleaned_data_changes) %in% "dates"],
names_to = c("country"),
values_to = c("value"))
temp <- filter(temp, country %in% c("US", "China", "Mexico"))
View(temp)
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
View(temp)
temp$dates <- dates
ggplot(data = temp) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
View(temp)
temp <- filter(temp, country %in% c("US"))
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
temp$dates <- dates
ggplot(data = temp) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
View(temp)
ggplot(data = temp) +
geom_smooth(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
column_names <- colnames(cleaned_data)
dates <- dates[-length(dates)]
#Data mining ------------------------------------------------------------------
#Data is mined so that we get the per day difference between the current date
#and the previous date. This is to look for any unusually high increases in
#value
#REDO AND RECHECK
cleaned_data_changes <- matrix(0,
nrow(cleaned_data) - 1,
ncol(cleaned_data))
colnames(cleaned_data_changes) <- column_names
rownames(cleaned_data_changes) <- row_names[-length(rownames)]
for(i in 1:((length(row_names)-1))){
cleaned_data_changes[i,2:ncol(cleaned_data_changes)] <- as.numeric(cleaned_data[i+1,2:ncol(cleaned_data)]) - as.numeric(cleaned_data[i,2:ncol(cleaned_data)])
}
cleaned_data_changes <- data.frame(cleaned_data_changes)
cleaned_data_changes$dates <- dates
#Plot data --------------------------------------------------------------------
temp <- cleaned_data %>%
pivot_longer(colnames(cleaned_data)[!colnames(cleaned_data) %in% "dates"],
names_to = c("country"),
values_to = c("value"))
temp <- filter(temp, country %in% c("US", "China", "Mexico"))
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
temp$dates <- dates
ggplot(data = temp) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
temp <- cleaned_data_changes %>%
pivot_longer(colnames(cleaned_data_changes)[!colnames(cleaned_data_changes) %in% "dates"],
names_to = c("country"),
values_to = c("value"))
temp <- filter(temp, country %in% c("US"))
dates <- as.numeric(mapvalues(temp$dates, from = unique(temp$dates),
to = seq(0:(length(unique(temp$dates))-1))))
temp$dates <- dates
ggplot(data = temp) +
geom_smooth(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
ggplot(data = temp) +
geom_smooth(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Cumulative Confirmed COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
geom_point(mapping = aes(x = dates, y = value, color = country))
ggplot(data = temp) +
geom_smooth(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Daily additional COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
ggplot(data = temp) +
geom_smooth(mapping = aes(x = dates, y = value, color = country)) +
geom_point(mapping = aes(x = dates, y = value, color = country)) +
labs(title = "Daily additional COVID-19 Cases.",
x = "Days since 01/22/2020",
y = "Number of Cases")
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
column_names <- colnames(cleaned_data)
dates <- dates[-length(dates)]
#Data mining ------------------------------------------------------------------
#Data is mined so that we get the per day difference between the current date
#and the previous date. This is to look for any unusually high increases in
#value
#REDO AND RECHECK
cleaned_data_changes <- matrix(0,
nrow(cleaned_data) - 1,
ncol(cleaned_data))
colnames(cleaned_data_changes) <- column_names
rownames(cleaned_data_changes) <- row_names[-length(rownames)]
for(i in 1:((length(row_names)-1))){
cleaned_data_changes[i,2:ncol(cleaned_data_changes)] <- as.numeric(
cleaned_data[i+1,2:ncol(cleaned_data)]) -
as.numeric(cleaned_data[i,2:ncol(cleaned_data)])
}
for(i in 1:((length(row_names)-1))){
cleaned_data_changes[i,2:ncol(cleaned_data_changes)] <-
as.numeric(cleaned_data[i+1,2:ncol(cleaned_data)]) -
as.numeric(cleaned_data[i,2:ncol(cleaned_data)])
}
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
column_names <- colnames(cleaned_data)
dates <- dates[-length(dates)]
#Data mining ------------------------------------------------------------------
#Data is mined so that we get the per day difference between the current date
#and the previous date. This is to look for any unusually high increases in
#value
#REDO AND RECHECK
cleaned_data_changes <- matrix(0,
nrow(cleaned_data) - 1,
ncol(cleaned_data))
colnames(cleaned_data_changes) <- column_names
rownames(cleaned_data_changes) <- row_names[-length(rownames)]
for(i in 1:((length(row_names)-1))){
cleaned_data_changes[i,2:ncol(cleaned_data_changes)] <-
as.numeric(cleaned_data[i+1,2:ncol(cleaned_data)]) -
as.numeric(cleaned_data[i,2:ncol(cleaned_data)])
}
cleaned_data_changes <- data.frame(cleaned_data_changes)
cleaned_data_changes$dates <- dates
View(cleaned_data_changes)
View(cleaned_data_changes)
---
title: "Global Coronavirus outlook"
date: 2020-07-03
output: html_document
---
It has been almost 6 months since the coronavirus appeared and impacted every nation in the world.
---
title: "Global Coronavirus outlook"
date: 2020-07-03
output: html_document
---
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
column_names <- colnames(cleaned_data)
dates <- dates[-length(dates)]
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
View(cleaned_data)
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
column_names <- colnames(cleaned_data)
dates <- dates[-length(dates)]
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
View(cleaned_data)
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
View(cleaned_data)
column_names <- colnames(cleaned_data)
dates <- dates[-length(dates)]
View(cleaned_data)
temp <- cleaned_data %>%
pivot_longer(colnames(cleaned_data)[!colnames(cleaned_data) %in% "dates"],
names_to = c("country"),
values_to = c("value"))
View(data)
View(temp)
library(tidyverse)
library(plyr)
#Load data --------------------------------------------------------------------
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
#Clean data -------------------------------------------------------------------
#Data is cleaned by grabbing only the country name and the values then
#aggregating the values so that the country contains the sum of all the
#all the provinces. The dates are readjusted so that they are all relative to
#01/22/20. (i.e 1 day after 1/22/20, 2 days after 01/22/20, etc)
column_names <- colnames(data)
row_names <- rownames(data)
data <- subset(data, select = -c(Lat,
Long,
Province.State))
dates <- colnames(data)[2:length(colnames(data))]
cleaned_data <- data.frame()
for(country in unique(data$Country.Region)){
temp_data = data[data$Country.Region == country,]
temp_data[1,dates] = colSums(temp_data[,dates])
cleaned_data = rbind(cleaned_data, temp_data[1,])
}
column_names <- cleaned_data$Country.Region
row_names <- seq(0,length(colnames(cleaned_data)) - 2)
cleaned_data <- t(cleaned_data)
cleaned_data <- data.frame(cleaned_data)
cleaned_data <- cleaned_data[!row.names(cleaned_data) == "Country.Region",]
cleaned_data <- as.data.frame(sapply(cleaned_data, as.numeric))
colnames(cleaned_data) <- column_names
rownames(cleaned_data) <- row_names
cleaned_data$dates <- dates
cleaned_data <- cleaned_data %>%
select(dates, everything())
cleaned_data <- cleaned_data %>%
select(dates, everything())
cleaned_data <- cleaned_data %>%
select(dates, everything())
cleaned_data <- cleaned_data %>%
select(dates, everything())
cleaned_data <- cleaned_data %>%
select(dates, everything())
cleaned_data <- cleaned_data %>%
select(dates, everything())
View(cleaned_data)
library(dplyr)
library(data.table)
library(tidyverse)
setwd("D:/Python_Code/Corona_tracker/")
data_path <- "./data/raw/"
#function to transpose tibble while keeping names
#https://stackoverflow.com/questions/42790219/how-do-i-transpose-a-tibble-in-r
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
rownames(t_df) <- t_df$rowname
return(t_df)
}
#cleaning
unallocated_remove <- function(df){
df <- filter(df, countyFIPS != 0 & countyFIPS != 1)
return(df)
}
confirmed <- read_csv(paste0(data_path,"covid_confirmed_usafacts.csv"))
deaths <- read_csv(paste0(data_path,"covid_deaths_usafacts.csv"))
population <- read_csv(paste0(data_path,"covid_county_population_usafacts.csv"))
confirmed <- unallocated_remove(confirmed)
deaths <- unallocated_remove(deaths)
population <- unallocated_remove(population)
dates <- colnames(confirmed)
dates <- dates[!dates %in% c("countyFIPS", "County Name", "State", "stateFIPS")]
county_name_uni <- population[c("countyFIPS", "County Name")]
confirmed <- confirmed %>%
pivot_longer(dates,
names_to = c("date"),
values_to = c("value"))
deaths <- deaths %>%
pivot_longer(dates,
names_to = c("date"),
values_to = c("value"))
graph_df <- filter(confirmed, `County Name` == "Harris County" & `State` == "TX" |
`County Name` == "Houston County" & `State` == "TX")
diff_df <- confirmed
